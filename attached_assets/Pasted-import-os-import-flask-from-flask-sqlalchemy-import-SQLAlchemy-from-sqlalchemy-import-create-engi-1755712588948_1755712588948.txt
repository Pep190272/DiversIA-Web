import os
import flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import create_engine, text

# Inicializar la aplicación Flask
app = flask.Flask(__name__)

# Configurar la conexión a la base de datos PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Definir el modelo de la tabla 'contacts'
class Contact(db.Model):
    __tablename__ = 'contacts'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    source = db.Column(db.String(50), nullable=False)
    contact_type = db.Column(db.String(50), nullable=False)

    def __repr__(self):
        return f'<Contact {self.name}>'

# Crear una ruta para la API de contactos
@app.route('/api/contacts', methods=['GET', 'POST'])
def handle_contacts():
    if flask.request.method == 'GET':
        contacts = Contact.query.all()
        return flask.jsonify([{
            'id': contact.id,
            'name': contact.name,
            'source': contact.source,
            'type': contact.contact_type
        } for contact in contacts])

    elif flask.request.method == 'POST':
        data = flask.request.json
        new_contact = Contact(
            name=data.get('name'),
            source=data.get('source'),
            contact_type=data.get('type')
        )
        db.session.add(new_contact)
        db.session.commit()
        return flask.jsonify({'message': 'Contact added successfully'}), 201

# Crear una ruta para eliminar contactos
@app.route('/api/contacts/<int:contact_id>', methods=['DELETE'])
def delete_contact(contact_id):
    contact = Contact.query.get_or_404(contact_id)
    db.session.delete(contact)
    db.session.commit()
    return flask.jsonify({'message': 'Contact deleted successfully'})

# Rutas para manejar las demás tablas (ejemplo)
# Aquí deberías añadir rutas para 'user', 'company', 'job_offer', etc.
@app.route('/api/users', methods=['GET'])
def get_users():
    # ... Lógica para consultar la tabla 'user'
    return flask.jsonify([])

# Inicializar la base de datos y correr la aplicación
if __name__ == '__main__':
    # Usar un contexto de aplicación para crear las tablas
    with app.app_context():
        # db.create_all()  # Descomentar para crear las tablas si aún no existen
        print("Database initialized and app running.")
    app.run(host='0.0.0.0', port=os.environ.get('PORT', 5000))