#!/usr/bin/env python3
"""
Test automatizado de todos los formularios de DiversIA (Flask)
Este script probar√° que todos los formularios env√≠en emails correctamente
"""

import requests
import time
from datetime import datetime

# URL base del servidor Flask
BASE_URL = 'http://localhost:5000'

# Datos de prueba para cada formulario
test_data = {
    'registro': {
        'nombre': 'Mar√≠a',
        'apellidos': 'Garc√≠a L√≥pez',
        'email': 'test.diversia.registro@gmail.com',
        'telefono': '555-0123',
        'ciudad': 'Madrid',
        'fecha_nacimiento': '1995-05-15',
        'tipo_neurodivergencia': 'tdah',
        'diagnostico_formal': 'si',
        'habilidades': 'Programaci√≥n, an√°lisis de datos',
        'experiencia_laboral': '3 a√±os en desarrollo web',
        'formacion_academica': 'Ingenier√≠a Inform√°tica',
        'intereses_laborales': 'Desarrollo frontend, UX/UI',
        'adaptaciones_necesarias': 'Horarios flexibles',
        'motivaciones': 'Busco un ambiente inclusivo',
        'aceptar_privacidad': 'y'
    },
    
    'registro-tdah': {
        'nombre': 'Carlos',
        'apellidos': 'Ruiz Mart√≠n',
        'email': 'test.diversia.tdah@gmail.com',
        'telefono': '555-0124',
        'ciudad': 'Barcelona',
        'fecha_nacimiento': '1992-08-20',
        'diagnostico_formal': 'si',
        'habilidades': 'Creatividad, resoluci√≥n de problemas',
        'experiencia_laboral': '5 a√±os en marketing digital',
        'formacion_academica': 'Licenciatura en Marketing',
        'intereses_laborales': 'Marketing creativo, estrategia digital',
        'adaptaciones_necesarias': 'Espacios sin distracciones',
        'motivaciones': 'Quiero usar mi creatividad al m√°ximo',
        'tipo_tdah': 'combinado',
        'nivel_atencion': 'medio',
        'impulsividad': 'alto',
        'hiperactividad': 'medio',
        'medicacion': 'si'
    },

    'empresas': {
        'nombre_empresa': 'TechInclusiva SL',
        'email_contacto': 'test.diversia.empresa@gmail.com',
        'telefono': '555-0125',
        'ciudad': 'Valencia',
        'sector': 'tecnologia',
        'tamano_empresa': 'mediana',
        'website': 'https://techinclusiva.es',
        'descripcion': 'Empresa tecnol√≥gica comprometida con la diversidad',
        'experiencia_inclusion': 'Tenemos pol√≠ticas espec√≠ficas para neurodiversidad',
        'aceptar_privacidad': 'y'
    }
}

def test_form(form_name, data):
    """Probar un formulario espec√≠fico"""
    url = f"{BASE_URL}/{form_name}"
    
    print(f"\nüß™ Probando formulario: {form_name}")
    print(f"   URL: {url}")
    
    try:
        # Hacer petici√≥n POST
        response = requests.post(url, data=data, allow_redirects=False)
        
        # Verificar respuesta
        if response.status_code in [200, 302]:  # √âxito o redirecci√≥n
            print(f"‚úÖ {form_name}: Formulario enviado correctamente")
            if response.status_code == 302:
                print(f"   ‚Üí Redirigido a: {response.headers.get('Location', 'Desconocido')}")
            return True
        else:
            print(f"‚ùå {form_name}: Error HTTP {response.status_code}")
            print(f"   ‚Üí Respuesta: {response.text[:200]}...")
            return False
            
    except requests.exceptions.ConnectionError:
        print(f"‚ùå {form_name}: Error de conexi√≥n - ¬øEst√° el servidor corriendo?")
        return False
    except Exception as e:
        print(f"‚ùå {form_name}: Error inesperado - {e}")
        return False

def test_email_endpoint():
    """Probar el endpoint de test de emails"""
    try:
        # Importar y probar la funci√≥n directamente
        from flask_email_service import test_email_service
        print("\nüß™ Probando servicio de emails...")
        
        if test_email_service():
            print("‚úÖ Test de email: Email de prueba enviado correctamente")
            return True
        else:
            print("‚ùå Test de email: Error enviando email de prueba")
            return False
            
    except Exception as e:
        print(f"‚ùå Test de email: Error - {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas de formularios DiversIA (Flask)")
    print("=" * 60)
    print(f"üìß Los emails se enviar√°n a: diversiaeternals@gmail.com")
    print(f"üîî Tambi√©n se enviar√°n emails de bienvenida a cada usuario/empresa")
    print("=" * 60)
    
    # Probar servicio de emails primero
    email_working = test_email_endpoint()
    
    # Probar formularios
    results = []
    
    for form_name, data in test_data.items():
        success = test_form(form_name, data)
        results.append((form_name, success))
        
        # Esperar un poco entre pruebas
        time.sleep(2)
    
    # Mostrar resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    successful = 0
    for form_name, success in results:
        status = "‚úÖ EXITOSO" if success else "‚ùå FALLIDO"
        print(f"{status:12} {form_name}")
        if success:
            successful += 1
    
    print("=" * 60)
    print(f"üìß Servicio de emails: {'‚úÖ FUNCIONANDO' if email_working else '‚ùå FALLIDO'}")
    print(f"üìù Formularios: {successful}/{len(results)} funcionando correctamente")
    print(f"‚è∞ Hora de prueba: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    if successful == len(results) and email_working:
        print("\nüéâ ¬°TODOS LOS SISTEMAS EST√ÅN FUNCIONANDO!")
        print("üìß Revisa la bandeja de entrada de diversiaeternals@gmail.com")
        print("‚ú® Sistema de emails autom√°ticos completamente configurado")
    else:
        print("\n‚ö†Ô∏è  Algunos sistemas necesitan atenci√≥n")
        
        if not email_working:
            print("üîß Revisar configuraci√≥n de Gmail (GMAIL_USER y GMAIL_APP_PASSWORD)")
        
        failed_forms = [name for name, success in results if not success]
        if failed_forms:
            print(f"üîß Formularios que requieren atenci√≥n: {', '.join(failed_forms)}")

if __name__ == "__main__":
    main()